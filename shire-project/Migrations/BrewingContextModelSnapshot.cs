// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using shire_project;

namespace shire_project.Migrations
{
    [DbContext(typeof(BrewingContext))]
    partial class BrewingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("shire_project.Models.BrewImage", b =>
                {
                    b.Property<int>("BrewImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("Location")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("BrewImageID");

                    b.ToTable("BrewImages");
                });

            modelBuilder.Entity("shire_project.Models.BrewSession", b =>
                {
                    b.Property<int>("BrewSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("End")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int>("RecipeID")
                        .HasColumnType("int");

                    b.Property<long?>("RecipeID1")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Start")
                        .HasColumnType("DATETIME");

                    b.HasKey("BrewSessionID");

                    b.HasIndex("RecipeID1");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("shire_project.Models.BrewSessionStep", b =>
                {
                    b.Property<int>("BrewSessionStepID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BrewSessionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("End")
                        .HasColumnType("DATETIME");

                    b.Property<int>("RecipeID")
                        .HasColumnType("int");

                    b.Property<long?>("RecipeID1")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Start")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("StepID")
                        .HasColumnType("int");

                    b.HasKey("BrewSessionStepID");

                    b.HasIndex("BrewSessionID");

                    b.HasIndex("RecipeID1");

                    b.HasIndex("StepID");

                    b.ToTable("BrewSessionSteps");
                });

            modelBuilder.Entity("shire_project.Models.Hop", b =>
                {
                    b.Property<int>("HopID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("AlphaAcids")
                        .HasColumnType("double");

                    b.Property<string>("Type")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Variety")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("HopID");

                    b.ToTable("Hops");
                });

            modelBuilder.Entity("shire_project.Models.HopIngredient", b =>
                {
                    b.Property<int>("HopIngredientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("HopID")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<int>("RecipeID")
                        .HasColumnType("int");

                    b.Property<long?>("RecipeID1")
                        .HasColumnType("bigint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Use")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("HopIngredientID");

                    b.HasIndex("HopID");

                    b.HasIndex("RecipeID1");

                    b.ToTable("HopIngredients");
                });

            modelBuilder.Entity("shire_project.Models.Malt", b =>
                {
                    b.Property<int>("MaltID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int>("Lovibond")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Origin")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<double>("PPG")
                        .HasColumnType("double");

                    b.Property<string>("Type")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("MaltID");

                    b.ToTable("Malts");
                });

            modelBuilder.Entity("shire_project.Models.MaltIngredient", b =>
                {
                    b.Property<int>("MaltIngredientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MaltID")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<int>("RecipeID")
                        .HasColumnType("int");

                    b.Property<long?>("RecipeID1")
                        .HasColumnType("bigint");

                    b.HasKey("MaltIngredientID");

                    b.HasIndex("MaltID");

                    b.HasIndex("RecipeID1");

                    b.ToTable("MaltIngredients");
                });

            modelBuilder.Entity("shire_project.Models.Note", b =>
                {
                    b.Property<int>("NoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TIMESTAMP");

                    b.HasKey("NoteID");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("shire_project.Models.Other", b =>
                {
                    b.Property<int>("OtherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Type")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("OtherID");

                    b.ToTable("Others");
                });

            modelBuilder.Entity("shire_project.Models.OtherIngredient", b =>
                {
                    b.Property<int>("OtherIngredientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("OtherID")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<int>("RecipeID")
                        .HasColumnType("int");

                    b.Property<long?>("RecipeID1")
                        .HasColumnType("bigint");

                    b.Property<string>("Use")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("OtherIngredientID");

                    b.HasIndex("OtherID");

                    b.HasIndex("RecipeID1");

                    b.ToTable("OtherIngredients");
                });

            modelBuilder.Entity("shire_project.Models.Recipe", b =>
                {
                    b.Property<long>("RecipeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("BatchSize")
                        .HasColumnType("double");

                    b.Property<int?>("BrewImageID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("Method")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int?>("NoteID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("StyleID")
                        .HasColumnType("int");

                    b.HasKey("RecipeID");

                    b.HasIndex("BrewImageID");

                    b.HasIndex("NoteID");

                    b.HasIndex("StyleID");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("shire_project.Models.Step", b =>
                {
                    b.Property<int>("StepID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BrewImageID")
                        .HasColumnType("int");

                    b.Property<string>("Kettle")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int>("RecipeID")
                        .HasColumnType("int");

                    b.Property<long?>("RecipeID1")
                        .HasColumnType("bigint");

                    b.Property<string>("Temp")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int>("Timer")
                        .HasColumnType("int");

                    b.HasKey("StepID");

                    b.HasIndex("BrewImageID");

                    b.HasIndex("RecipeID1");

                    b.ToTable("Step");
                });

            modelBuilder.Entity("shire_project.Models.Style", b =>
                {
                    b.Property<int>("StyleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BJCP")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int?>("BrewImageID")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int>("Lovibond")
                        .HasColumnType("int");

                    b.Property<int>("MaxABV")
                        .HasColumnType("int");

                    b.Property<double>("MaxCO2")
                        .HasColumnType("double");

                    b.Property<double>("MaxFinalGravity")
                        .HasColumnType("double");

                    b.Property<int>("MaxIBU")
                        .HasColumnType("int");

                    b.Property<int>("MinABV")
                        .HasColumnType("int");

                    b.Property<double>("MinCO2")
                        .HasColumnType("double");

                    b.Property<double>("MinFinalGravity")
                        .HasColumnType("double");

                    b.Property<string>("MinIBU")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("StyleID");

                    b.HasIndex("BrewImageID");

                    b.ToTable("Styles");
                });

            modelBuilder.Entity("shire_project.Models.Temp", b =>
                {
                    b.Property<int>("TempID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BrewSessionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("DATETIME");

                    b.Property<decimal>("bk")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("hlt")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("mlt")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("TempID");

                    b.HasIndex("BrewSessionID");

                    b.ToTable("Temps");
                });

            modelBuilder.Entity("shire_project.Models.Yeast", b =>
                {
                    b.Property<int>("YeastID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Attenuation")
                        .HasColumnType("double");

                    b.Property<string>("Code")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Floccuation")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Lab")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<double>("MaxTemp")
                        .HasColumnType("double");

                    b.Property<double>("MinTemp")
                        .HasColumnType("double");

                    b.Property<string>("Strain")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Type")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("YeastID");

                    b.ToTable("Yeasts");
                });

            modelBuilder.Entity("shire_project.Models.YeastIngredient", b =>
                {
                    b.Property<int>("YeastIngredientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<int>("RecipeID")
                        .HasColumnType("int");

                    b.Property<long?>("RecipeID1")
                        .HasColumnType("bigint");

                    b.Property<string>("Starter")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int>("YeastID")
                        .HasColumnType("int");

                    b.HasKey("YeastIngredientID");

                    b.HasIndex("RecipeID1");

                    b.HasIndex("YeastID");

                    b.ToTable("YeastIngredients");
                });

            modelBuilder.Entity("shire_project.Models.BrewSession", b =>
                {
                    b.HasOne("shire_project.Models.Recipe", "Recipe")
                        .WithMany("BrewSessions")
                        .HasForeignKey("RecipeID1");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("shire_project.Models.BrewSessionStep", b =>
                {
                    b.HasOne("shire_project.Models.BrewSession", "BrewSession")
                        .WithMany("BrewSessionSteps")
                        .HasForeignKey("BrewSessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shire_project.Models.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeID1");

                    b.HasOne("shire_project.Models.Step", null)
                        .WithMany("BrewSessionSteps")
                        .HasForeignKey("StepID");

                    b.Navigation("BrewSession");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("shire_project.Models.HopIngredient", b =>
                {
                    b.HasOne("shire_project.Models.Hop", "Hop")
                        .WithMany("HopIngredients")
                        .HasForeignKey("HopID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shire_project.Models.Recipe", "Recipe")
                        .WithMany("HopIngredients")
                        .HasForeignKey("RecipeID1");

                    b.Navigation("Hop");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("shire_project.Models.MaltIngredient", b =>
                {
                    b.HasOne("shire_project.Models.Malt", "Malt")
                        .WithMany("MaltIngredients")
                        .HasForeignKey("MaltID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shire_project.Models.Recipe", "Recipe")
                        .WithMany("MaltIngedients")
                        .HasForeignKey("RecipeID1");

                    b.Navigation("Malt");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("shire_project.Models.OtherIngredient", b =>
                {
                    b.HasOne("shire_project.Models.Other", "Other")
                        .WithMany("OtherIngredients")
                        .HasForeignKey("OtherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shire_project.Models.Recipe", "Recipe")
                        .WithMany("OtherIngredients")
                        .HasForeignKey("RecipeID1");

                    b.Navigation("Other");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("shire_project.Models.Recipe", b =>
                {
                    b.HasOne("shire_project.Models.BrewImage", "BrewImage")
                        .WithMany("Recipes")
                        .HasForeignKey("BrewImageID");

                    b.HasOne("shire_project.Models.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteID");

                    b.HasOne("shire_project.Models.Style", "Style")
                        .WithMany()
                        .HasForeignKey("StyleID");

                    b.Navigation("BrewImage");

                    b.Navigation("Note");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("shire_project.Models.Step", b =>
                {
                    b.HasOne("shire_project.Models.BrewImage", null)
                        .WithMany("Steps")
                        .HasForeignKey("BrewImageID");

                    b.HasOne("shire_project.Models.Recipe", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeID1");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("shire_project.Models.Style", b =>
                {
                    b.HasOne("shire_project.Models.BrewImage", "BrewImage")
                        .WithMany("Styles")
                        .HasForeignKey("BrewImageID");

                    b.Navigation("BrewImage");
                });

            modelBuilder.Entity("shire_project.Models.Temp", b =>
                {
                    b.HasOne("shire_project.Models.BrewSession", "BrewSession")
                        .WithMany()
                        .HasForeignKey("BrewSessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BrewSession");
                });

            modelBuilder.Entity("shire_project.Models.YeastIngredient", b =>
                {
                    b.HasOne("shire_project.Models.Recipe", "Recipe")
                        .WithMany("YeastIngredients")
                        .HasForeignKey("RecipeID1");

                    b.HasOne("shire_project.Models.Yeast", "Yeast")
                        .WithMany("YeastIngredients")
                        .HasForeignKey("YeastID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("Yeast");
                });

            modelBuilder.Entity("shire_project.Models.BrewImage", b =>
                {
                    b.Navigation("Recipes");

                    b.Navigation("Steps");

                    b.Navigation("Styles");
                });

            modelBuilder.Entity("shire_project.Models.BrewSession", b =>
                {
                    b.Navigation("BrewSessionSteps");
                });

            modelBuilder.Entity("shire_project.Models.Hop", b =>
                {
                    b.Navigation("HopIngredients");
                });

            modelBuilder.Entity("shire_project.Models.Malt", b =>
                {
                    b.Navigation("MaltIngredients");
                });

            modelBuilder.Entity("shire_project.Models.Other", b =>
                {
                    b.Navigation("OtherIngredients");
                });

            modelBuilder.Entity("shire_project.Models.Recipe", b =>
                {
                    b.Navigation("BrewSessions");

                    b.Navigation("HopIngredients");

                    b.Navigation("MaltIngedients");

                    b.Navigation("OtherIngredients");

                    b.Navigation("Steps");

                    b.Navigation("YeastIngredients");
                });

            modelBuilder.Entity("shire_project.Models.Step", b =>
                {
                    b.Navigation("BrewSessionSteps");
                });

            modelBuilder.Entity("shire_project.Models.Yeast", b =>
                {
                    b.Navigation("YeastIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
